import {ClassConstructorParameterScope, NamespaceDeclarationType, Scope, VariableDeclarationType} from "./../definitions";
import {IExpression} from "./expression";
import {ITypeExpression} from "./type-expression";
import {ISignature} from "./signature";
import {ISymbol} from "./symbol";
import {ISourceFileChild} from "./source-file-child";

export interface INode extends ISourceFileChild {
    forEachChild(callback: (node: INode) => void): void;
    getClassConstructorParameterScope(): ClassConstructorParameterScope;
    getConstantValue(): number;
    getDecorators(): INode[];
    getDecoratorName(): string;
    getDecoratorArguments(): IExpression[];
    getDefaultExpression(): IExpression;
    getExpression(): IExpression;
    getHeritageNodes(): INode[];
    getImplementsTypeExpressions(): ITypeExpression[];
    getLocalSymbol(): ISymbol;
    getName(): string;
    getNamespaceDeclarationType(): NamespaceDeclarationType;
    getParameters(): INode[];
    getReturnTypeExpression(): ITypeExpression;
    getScope(): Scope;
    getSignatureFromThis(): ISignature;
    getSymbol(): ISymbol;
    getTypeExpression(): ITypeExpression;
    getTypeParameters(): INode[];
    getTypeParameterConstraintTypeExpression(): ITypeExpression;
    getTypes(): ITypeExpression[];
    getVariableDeclarationType(): VariableDeclarationType;
    hasAbstractKeyword(): boolean;
    hasDeclareKeyword(): boolean;
    hasStaticKeyword(): boolean;
    isAmbient(): boolean;
    isClass(): boolean;
    isConstructor(): boolean;
    isConstructorParameter(): boolean;
    isConstructSignature(): boolean;
    isEnum(): boolean;
    isExportDeclaration(): boolean;
    isExportAssignment(): boolean;
    isFunction(): boolean;
    isFunctionType(): boolean;
    isGetAccessor(): boolean;
    isIdentifier(): boolean;
    isImport(): boolean;
    isInterface(): boolean;
    isMethodDeclaration(): boolean;
    isMethodSignature(): boolean;
    isNamespace(): boolean;
    isParameterOptional(): boolean;
    isPropertyOptional(): boolean;
    isRestParameter(): boolean;
    isPropertyDeclaration(): boolean;
    isPropertySignature(): boolean;
    isSetAccessor(): boolean;
    isTypeAlias(): boolean;
    isTypeParameter(): boolean;
    isVariable(): boolean;
    nodeKindToString(): string;
}
